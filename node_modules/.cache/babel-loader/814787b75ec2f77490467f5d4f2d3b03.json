{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar func = _propTypes2.default.func,\n    oneOf = _propTypes2.default.oneOf,\n    bool = _propTypes2.default.bool,\n    objectOf = _propTypes2.default.objectOf,\n    number = _propTypes2.default.number;\nvar TooltipMixin = {\n  propTypes: {\n    tooltipHtml: func,\n    tooltipMode: oneOf(['mouse', 'element', 'fixed']),\n    tooltipContained: bool,\n    tooltipOffset: objectOf(number)\n  },\n  getInitialState: function getInitialState() {\n    return {\n      tooltip: {\n        hidden: true\n      }\n    };\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      tooltipMode: 'mouse',\n      tooltipOffset: {\n        top: -35,\n        left: 0\n      },\n      tooltipHtml: null,\n      tooltipContained: false\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    this._svgNode = _reactDom2.default.findDOMNode(this).getElementsByTagName('svg')[0];\n  },\n  onMouseEnter: function onMouseEnter(e, data) {\n    if (!this.props.tooltipHtml) {\n      return;\n    }\n\n    e.preventDefault();\n    var _props = this.props,\n        margin = _props.margin,\n        tooltipMode = _props.tooltipMode,\n        tooltipOffset = _props.tooltipOffset,\n        tooltipContained = _props.tooltipContained;\n    var svg = this._svgNode;\n    var position = void 0;\n\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      point.x = e.clientX, point.y = e.clientY;\n      point = point.matrixTransform(svg.getScreenCTM().inverse());\n      position = [point.x - margin.left, point.y - margin.top];\n    } else {\n      var rect = svg.getBoundingClientRect();\n      position = [e.clientX - rect.left - svg.clientLeft - margin.left, e.clientY - rect.top - svg.clientTop - margin.top];\n    }\n\n    var _tooltipHtml = this._tooltipHtml(data, position),\n        _tooltipHtml2 = _slicedToArray(_tooltipHtml, 3),\n        html = _tooltipHtml2[0],\n        xPos = _tooltipHtml2[1],\n        yPos = _tooltipHtml2[2];\n\n    var svgTop = svg.getBoundingClientRect().top + margin.top;\n    var svgLeft = svg.getBoundingClientRect().left + margin.left;\n    var top = 0;\n    var left = 0;\n\n    if (tooltipMode === 'fixed') {\n      top = svgTop + tooltipOffset.top;\n      left = svgLeft + tooltipOffset.left;\n    } else if (tooltipMode === 'element') {\n      top = svgTop + yPos + tooltipOffset.top;\n      left = svgLeft + xPos + tooltipOffset.left;\n    } else {\n      // mouse\n      top = e.clientY + tooltipOffset.top;\n      left = e.clientX + tooltipOffset.left;\n    }\n\n    function lerp(t, a, b) {\n      return (1 - t) * a + t * b;\n    }\n\n    var translate = 50;\n\n    if (tooltipContained) {\n      var t = position[0] / svg.getBoundingClientRect().width;\n      translate = lerp(t, 0, 100);\n    }\n\n    this.setState({\n      tooltip: {\n        top: top,\n        left: left,\n        hidden: false,\n        html: html,\n        translate: translate\n      }\n    });\n  },\n  onMouseLeave: function onMouseLeave(e) {\n    if (!this.props.tooltipHtml) {\n      return;\n    }\n\n    e.preventDefault();\n    this.setState({\n      tooltip: {\n        hidden: true\n      }\n    });\n  }\n};\nexports.default = TooltipMixin;","map":null,"metadata":{},"sourceType":"script"}