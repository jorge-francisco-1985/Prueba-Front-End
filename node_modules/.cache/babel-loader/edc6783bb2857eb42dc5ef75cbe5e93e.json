{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _createReactClass = require('create-react-class');\n\nvar _createReactClass2 = _interopRequireDefault(_createReactClass);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar array = _propTypes2.default.array,\n    func = _propTypes2.default.func,\n    oneOf = _propTypes2.default.oneOf,\n    number = _propTypes2.default.number,\n    string = _propTypes2.default.string;\nvar Axis = (0, _createReactClass2.default)({\n  displayName: 'Axis',\n  propTypes: {\n    tickArguments: array,\n    tickValues: array,\n    tickFormat: func,\n    tickDirection: oneOf(['horizontal', 'vertical', 'diagonal']),\n    innerTickSize: number,\n    tickPadding: number,\n    outerTickSize: number,\n    scale: func.isRequired,\n    className: string,\n    zero: number,\n    orientation: oneOf(['top', 'bottom', 'left', 'right']).isRequired,\n    label: string\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      tickArguments: [10],\n      tickValues: null,\n      tickFormat: null,\n      tickDirection: 'horizontal',\n      innerTickSize: 6,\n      tickPadding: 3,\n      outerTickSize: 6,\n      className: 'axis',\n      zero: 0,\n      label: ''\n    };\n  },\n  _getTranslateString: function _getTranslateString() {\n    var _props = this.props,\n        orientation = _props.orientation,\n        height = _props.height,\n        width = _props.width,\n        zero = _props.zero;\n\n    if (orientation === 'top') {\n      return 'translate(0, ' + zero + ')';\n    } else if (orientation === 'bottom') {\n      return 'translate(0, ' + (zero == 0 ? height : zero) + ')';\n    } else if (orientation === 'left') {\n      return 'translate(' + zero + ', 0)';\n    } else if (orientation === 'right') {\n      return 'translate(' + (zero == 0 ? width : zero) + ', 0)';\n    } else {\n      return '';\n    }\n  },\n  render: function render() {\n    var _props2 = this.props,\n        height = _props2.height,\n        tickArguments = _props2.tickArguments,\n        tickValues = _props2.tickValues,\n        tickDirection = _props2.tickDirection,\n        innerTickSize = _props2.innerTickSize,\n        tickPadding = _props2.tickPadding,\n        outerTickSize = _props2.outerTickSize,\n        scale = _props2.scale,\n        orientation = _props2.orientation,\n        zero = _props2.zero;\n    var _props3 = this.props,\n        width = _props3.width,\n        className = _props3.className,\n        label = _props3.label;\n    var tickFormat = this.props.tickFormat;\n    var ticks = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues;\n\n    if (!tickFormat) {\n      if (scale.tickFormat) {\n        tickFormat = scale.tickFormat.apply(scale, tickArguments);\n      } else {\n        tickFormat = function tickFormat(x) {\n          return x;\n        };\n      }\n    } // TODO: is there a cleaner way? removes the 0 tick if axes are crossing\n\n\n    if (zero != height && zero != width && zero != 0) {\n      ticks = ticks.filter(function (element) {\n        return element != 0;\n      });\n    }\n\n    var tickSpacing = Math.max(innerTickSize, 0) + tickPadding;\n    var sign = orientation === 'top' || orientation === 'left' ? -1 : 1;\n\n    var range = this._d3ScaleRange(scale);\n\n    var activeScale = scale.rangeBand ? function (e) {\n      return scale(e) + scale.rangeBand() / 2;\n    } : scale;\n    var transform = void 0,\n        x = void 0,\n        y = void 0,\n        x2 = void 0,\n        y2 = void 0,\n        dy = void 0,\n        textAnchor = void 0,\n        d = void 0,\n        labelElement = void 0,\n        tickRotation = 0;\n\n    if (orientation === 'bottom' || orientation === 'top') {\n      transform = 'translate({}, 0)';\n      x = 0;\n      y = sign * tickSpacing;\n      x2 = 0;\n      y2 = sign * innerTickSize;\n      dy = sign < 0 ? '0em' : '.71em';\n      textAnchor = 'middle';\n      d = 'M' + range[0] + ', ' + sign * outerTickSize + 'V0H' + range[1] + 'V' + sign * outerTickSize;\n\n      if (tickDirection === 'vertical') {\n        tickRotation = -90;\n        x = -tickSpacing;\n        y = -innerTickSize;\n        textAnchor = 'end';\n      } else if (tickDirection === 'diagonal') {\n        tickRotation = -60;\n        x = -tickSpacing;\n        y = 0;\n        textAnchor = 'end';\n      }\n\n      labelElement = _react2.default.createElement('text', {\n        className: className + ' label',\n        textAnchor: \"end\",\n        x: width,\n        y: -6\n      }, label);\n    } else {\n      transform = 'translate(0, {})';\n      x = sign * tickSpacing;\n      y = 0;\n      x2 = sign * innerTickSize;\n      y2 = 0;\n      dy = '.32em';\n      textAnchor = sign < 0 ? 'end' : 'start';\n      d = 'M' + sign * outerTickSize + ', ' + range[0] + 'H0V' + range[1] + 'H' + sign * outerTickSize;\n\n      if (tickDirection === 'vertical') {\n        tickRotation = -90;\n        x -= sign * tickSpacing;\n        y = -(tickSpacing + innerTickSize);\n        textAnchor = 'middle';\n      } else if (tickDirection === 'diagonal') {\n        tickRotation = -60;\n        x -= sign * tickSpacing;\n        y = -(tickSpacing + innerTickSize);\n        textAnchor = 'middle';\n      }\n\n      labelElement = _react2.default.createElement('text', {\n        className: className + ' label',\n        textAnchor: 'end',\n        y: 6,\n        dy: orientation === 'left' ? '.75em' : '-1.25em',\n        transform: 'rotate(-90)'\n      }, label);\n    }\n\n    var tickElements = ticks.map(function (tick, index) {\n      var position = activeScale(tick);\n      var translate = transform.replace('{}', position);\n      return _react2.default.createElement('g', {\n        key: tick + '.' + index,\n        className: 'tick',\n        transform: translate\n      }, _react2.default.createElement('line', {\n        x2: x2,\n        y2: y2,\n        stroke: '#aaa'\n      }), _react2.default.createElement('text', {\n        x: x,\n        y: y,\n        dy: dy,\n        textAnchor: textAnchor,\n        transform: 'rotate(' + tickRotation + ')'\n      }, tickFormat(tick)));\n    });\n\n    var pathElement = _react2.default.createElement('path', {\n      className: 'domain',\n      d: d,\n      fill: 'none',\n      stroke: '#aaa'\n    });\n\n    var axisBackground = _react2.default.createElement('rect', {\n      className: 'axis-background',\n      fill: 'none'\n    });\n\n    return _react2.default.createElement('g', {\n      ref: 'axis',\n      className: className,\n      transform: this._getTranslateString(),\n      style: {\n        shapeRendering: 'crispEdges'\n      }\n    }, axisBackground, tickElements, pathElement, labelElement);\n  },\n  _d3ScaleExtent: function _d3ScaleExtent(domain) {\n    var start = domain[0];\n    var stop = domain[domain.length - 1];\n    return start < stop ? [start, stop] : [stop, start];\n  },\n  _d3ScaleRange: function _d3ScaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : this._d3ScaleExtent(scale.range());\n  }\n});\nexports.default = Axis;","map":null,"metadata":{},"sourceType":"script"}