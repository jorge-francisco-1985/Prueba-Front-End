{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _createReactClass = require('create-react-class');\n\nvar _createReactClass2 = _interopRequireDefault(_createReactClass);\n\nvar _Chart = require('./Chart');\n\nvar _Chart2 = _interopRequireDefault(_Chart);\n\nvar _Bar = require('./Bar');\n\nvar _Bar2 = _interopRequireDefault(_Bar);\n\nvar _DefaultPropsMixin = require('./DefaultPropsMixin');\n\nvar _DefaultPropsMixin2 = _interopRequireDefault(_DefaultPropsMixin);\n\nvar _HeightWidthMixin = require('./HeightWidthMixin');\n\nvar _HeightWidthMixin2 = _interopRequireDefault(_HeightWidthMixin);\n\nvar _ArrayifyMixin = require('./ArrayifyMixin');\n\nvar _ArrayifyMixin2 = _interopRequireDefault(_ArrayifyMixin);\n\nvar _StackAccessorMixin = require('./StackAccessorMixin');\n\nvar _StackAccessorMixin2 = _interopRequireDefault(_StackAccessorMixin);\n\nvar _StackDataMixin = require('./StackDataMixin');\n\nvar _StackDataMixin2 = _interopRequireDefault(_StackDataMixin);\n\nvar _DefaultScalesMixin = require('./DefaultScalesMixin');\n\nvar _DefaultScalesMixin2 = _interopRequireDefault(_DefaultScalesMixin);\n\nvar _TooltipMixin = require('./TooltipMixin');\n\nvar _TooltipMixin2 = _interopRequireDefault(_TooltipMixin);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar array = _propTypes2.default.array,\n    func = _propTypes2.default.func; // receive array and return a subsampled array of size n\n//\n// a= the array;\n// n= number of sample you want output\n\nvar subSample = function subSample(a, n) {\n  var returnArray = [];\n  var m = a.length;\n  var samplingRatio = m / n; //just round down for now in case of comma separated\n\n  for (var i = 0; i < m;) {\n    returnArray.push(a[Math.floor(i)]);\n    i += samplingRatio;\n  }\n\n  return returnArray;\n};\n\nvar DataSet = (0, _createReactClass2.default)({\n  displayName: 'DataSet',\n  propTypes: {\n    data: array.isRequired,\n    xScale: func.isRequired,\n    yScale: func.isRequired,\n    colorScale: func.isRequired,\n    values: func.isRequired,\n    label: func.isRequired,\n    x: func.isRequired,\n    y: func.isRequired,\n    y0: func.isRequired\n  },\n  render: function render() {\n    var _props = this.props,\n        data = _props.data,\n        yScale = _props.yScale,\n        colorScale = _props.colorScale,\n        values = _props.values,\n        label = _props.label,\n        y = _props.y,\n        x0 = _props.x0,\n        onMouseEnter = _props.onMouseEnter,\n        onMouseLeave = _props.onMouseLeave;\n    var height = yScale(yScale.domain()[0]);\n    var bars = data.map(function (stack) {\n      return values(stack).map(function (e, index) {\n        // maps the range [0,1] to the range [0, yDomain]\n        var yValue = height * y(e); // center vertically to have upper and lower part of the waveform\n\n        var vy = height / 2 - yValue / 2; //position x(e) * width * 2 because we want equal sapce.\n\n        var vx = 2 * x0 * index;\n        return _react2.default.createElement(_Bar2.default, {\n          key: label(stack) + '.' + index,\n          width: x0,\n          height: yValue,\n          x: vx,\n          y: vy,\n          fill: colorScale(Math.floor(vx)),\n          data: e,\n          onMouseEnter: onMouseEnter,\n          onMouseLeave: onMouseLeave\n        });\n      });\n    });\n    return _react2.default.createElement('g', null, bars);\n  }\n});\nvar Waveform = (0, _createReactClass2.default)({\n  displayName: 'Waveform',\n  mixins: [_DefaultPropsMixin2.default, _HeightWidthMixin2.default, _ArrayifyMixin2.default, _StackAccessorMixin2.default, _StackDataMixin2.default, _DefaultScalesMixin2.default, _TooltipMixin2.default],\n  getDefaultProps: function getDefaultProps() {\n    return {};\n  },\n  _tooltipHtml: function _tooltipHtml(d) {\n    var _ref = [this._xScale, this._yScale],\n        xScale = _ref[0],\n        yScale = _ref[1];\n    var html = this.props.tooltipHtml(this.props.x(d), this.props.y0(d), this.props.y(d));\n    var midPoint = xScale.rangeBand() / 2;\n    var xPos = midPoint + xScale(this.props.x(d));\n    var topStack = this._data[this._data.length - 1].values;\n    var topElement = null; // TODO: this might not scale if dataset is huge.\n    // consider pre-computing yPos for each X\n\n    for (var i = 0; i < topStack.length; i++) {\n      if (this.props.x(topStack[i]) === this.props.x(d)) {\n        topElement = topStack[i];\n        break;\n      }\n    }\n\n    var yPos = yScale(this.props.y0(topElement) + this.props.y(topElement));\n    return [html, xPos, yPos];\n  },\n  render: function render() {\n    var _props2 = this.props,\n        height = _props2.height,\n        width = _props2.width,\n        margin = _props2.margin,\n        colorScale = _props2.colorScale,\n        values = _props2.values,\n        label = _props2.label,\n        y = _props2.y,\n        y0 = _props2.y0,\n        x = _props2.x;\n    var data = this._data;\n    var innerWidth = this._innerWidth;\n    var xScale = this._xScale;\n    var yScale = this._yScale;\n    var preserveAspectRatio = 'none';\n    var viewBox = '0 0 ' + width + ' ' + height; // there are two options, if the samples are less than the space available\n    // we'll stretch the width of bar and inbetween spaces.\n    // Otherwise we just subSample the dataArray.\n\n    var barWidth = void 0;\n\n    if (data[0].values.length > innerWidth / 2) {\n      data[0].values = subSample(data[0].values, innerWidth / 2);\n      barWidth = 1;\n    } else {\n      barWidth = innerWidth / 2 / data[0].values.length;\n    }\n\n    return _react2.default.createElement('div', null, _react2.default.createElement(_Chart2.default, {\n      height: height,\n      width: width,\n      margin: margin,\n      viewBox: viewBox,\n      preserveAspectRatio: preserveAspectRatio\n    }, _react2.default.createElement(DataSet, {\n      data: data,\n      xScale: xScale,\n      yScale: yScale,\n      colorScale: colorScale,\n      label: label,\n      values: values,\n      x: x,\n      y: y,\n      y0: y0,\n      x0: barWidth,\n      onMouseEnter: this.onMouseEnter,\n      onMouseLeave: this.onMouseLeave\n    }, this.props.children)));\n  }\n});\nexports.default = Waveform;","map":null,"metadata":{},"sourceType":"script"}