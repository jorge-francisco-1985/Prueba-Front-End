{"version":3,"sources":["components/Legend.js","components/Title.js","components/Element.js","components/Elements.js","App.js","serviceWorker.js","index.js"],"names":["Elements","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","titletyle","color","react_default","a","createElement","Row","Col","style","label","className","percent","value","simbol","Component","numeral","require","title","total","toUpperCase","format","Element","chartData","datasets","element","data","backgroundColor","labels","i","length","push","setState","component","map","key","components_Legend","sm","es","options","cutoutPercentage","legend","display","rotation","Math","PI","components_Title","elements","src_components_Element","Container","App","components_Elements","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.837766bf.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nimport './Legend.css';\r\n\r\nclass Elements extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n    render() {\r\n        const titletyle = { \r\n            color: this.props.color\r\n        };\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col>\r\n                        <div style={titletyle}> <b> {this.props.label}</b></div>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col><div className=\"percent\">{this.props.percent}%</div></Col>\r\n                    <Col><div className=\"legend-value\">{this.props.value}{this.props.simbol}</div></Col>\r\n                </Row>\r\n                \r\n                \r\n            </div>\r\n            \r\n            \r\n\r\n        );\r\n    }\r\n}\r\nexport default Elements;","import React, { Component } from 'react';\r\nimport './Title.css';\r\nimport './Legend.css';\r\nvar numeral = require('numeral');\r\nclass Elements extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n    render() {\r\n        var title=this.props.title;\r\n        var total=this.props.total;\r\n        var simbol = this.props.simbol;\r\n        return (\r\n            <div>\r\n                <div className=\"flotante\">\r\n                    <div className=\"title\">{title.toUpperCase()}</div>\r\n                    <div className=\"value\">{numeral(total).format('0,0,0,0')}{simbol}</div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\nexport default Elements;","import React, { Component } from 'react';\r\nimport { Row,Col } from 'react-bootstrap';\r\nimport { Doughnut} from 'react-chartjs-2';\r\nimport './Element.css';\r\nimport Legend from './Legend';\r\nimport Title from './Title';\r\nvar numeral = require('numeral');\r\nclass Element extends Component {\r\n    // element.\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            chartData:{\r\n                \r\n                datasets:[\r\n                    {\r\n                        label: props.element.title,\r\n                    }\r\n                ]\r\n\r\n            },\r\n            total:0\r\n        }\r\n\r\n    }\r\n    componentDidMount() {\r\n        var data = [], backgroundColor = [], labels=[],total=0;\r\n        for (let i = this.props.element.data.length-1;i>=0;i--){\r\n            total += this.props.element.data[i].value;\r\n            data.push(this.props.element.data[i].value);\r\n            backgroundColor.push(this.props.element.data[i].color);\r\n            labels.push(this.props.element.data[i].label);\r\n        }\r\n                \r\n        this.setState({\r\n            chartData: {\r\n                labels: labels,\r\n                datasets: [{\r\n                    data: data,\r\n                    backgroundColor: backgroundColor,\r\n\r\n                }]\r\n            },\r\n            total:total\r\n        });\r\n        \r\n    }\r\n    render() {\r\n        var simbol = this.props.element.simbol,\r\n            title = this.props.element.title,\r\n            total=this.state.total,\r\n            data = this.props.element.data;\r\n\r\n        var component = data.map((element, i) => {\r\n            var percent = (100 / total) * element.value,\r\n                color = element.color,\r\n                label = element.label,\r\n                value = element.value;\r\n\r\n            return (\r\n                <Col key={i}>\r\n                    <Legend \r\n                        label={label} \r\n                        color={color} \r\n                        percent={percent} \r\n                        value={numeral(value).format('0,0,0,0')}\r\n                        simbol={simbol}\r\n                        ></Legend>\r\n                </Col>\r\n\r\n            )\r\n        })\r\n        return (\r\n            \r\n            <div className=\"chart\">\r\n                <Row>\r\n                    <Col sm={12}>\r\n                        <Doughnut\r\n                            data={this.state.chartData}\r\n                            options={{\r\n                                cutoutPercentage: 90,\r\n                                legend: {\r\n                                    display: false,\r\n                                    rotation: -0.7 * Math.PI\r\n                                }\r\n                            }}\r\n                        >\r\n\r\n                        </Doughnut>\r\n                        <Title title={title} total={total} simbol={simbol}></Title>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    {component}\r\n                </Row>\r\n                \r\n                \r\n                \r\n            </div>\r\n\r\n\r\n            \r\n        );\r\n    }\r\n}\r\nexport default Element;","import React, { Component } from 'react';\r\n\r\nimport { Row,Container,Col } from 'react-bootstrap';\r\nimport Element from './Element'\r\nclass Elements extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            \r\n        }\r\n    }\r\n    render() {\r\n        var element=this.props.elements.map((element,i)=>{\r\n            return(\r\n                <Col sm={4} key={i}>\r\n                    <Element element={element} ></Element>\r\n                </Col>\r\n                \r\n            )\r\n        })\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    {element}\r\n                </Row>\r\n            </Container>\r\n            \r\n        );\r\n    }\r\n}\r\nexport default Elements;","import React from 'react';\r\n\r\n\r\nimport './App.css';\r\nimport { elements } from './datos/datos';\r\nimport Elements from './components/Elements'\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Elements elements={elements}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}